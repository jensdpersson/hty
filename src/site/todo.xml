<?xml-stylesheet type="text/xsl" href="simpletodoview.xsl"?>
<todo>
    Main todo for hty project.
    <todo>
        Http transaction
        <todo>
            Should realm and principal be bound in fields of their own or not?
        </todo>
    </todo>
    <todo>
        Mounting
        <todo>
            We need a working reload from cli.
        </todo>
        <todo>
            The Fspath and Rules params should probably merge into
            a Walker param. From this you can access the Fspath and
            add rules.
            <done/>
        </todo>
        <todo>
            Perhaps the rule system needs a rethinking. Adding the rules in
            the folder tree and then the resources under it feels double.
            One could add rules in a file instead, but the double specification
            would remain. One could skip the rules and map folder names onto
            resource classes strictly. Perhaps the signature for a resource
            class ctor would be Resource:new(Walker) or Resource:new(Fspath).
            Not really, one needs to run code in the walk step, Erl doesnt do
            that in ctors. Which subfolders to walk and which subfolders to just
            keep depends on the resource class.
            So, in some way this needs to be communicated if the walker is going
            to do this. Would it be enough having functions exposed on the resource
            class module? The framework could look at all subs, and map them onto
            functions. Or, one could standardize the ctor param like above, and
            keep an init function in the resource class. This could return info on
            what subfolders to pursue.
            But, in essence, this is just pushing the rule function into the
            resource class. Perhaps the way to do it would be to keep the rules
            and resource classes separate but change how rules are found.
            If the rule to apply would be mapped from the folder name then
            this would also be faster in a situation with many rules active.
            How would the rule mapping work?
            The ext on the folder should probably select a set of modules with
            a set of prefixes, hty_ from start and Custom1_ etc, by conf.
            If any of these exists they are asked or so. Then, the rest of
            the folder name as well as the folder contents are fed to the rule.
            Hmm. This is actually like today, the Fspath param is just that.
            But the contract would change, returning a claim would not be needed
            as much as just returning the resource class module.
            Starting to feel this change does nothing.
            <done>
              hty_mounter now constructs the name of the handler module from
              the folder name. The module can then create whatever handler it
              wishes on new/1.
            </done>
        </todo>
    </todo>
    <todo>
      All directives should be exercised in a passing integ test case and
      have an entry in the directive docs that specifies that behaviour.
      Or dropped if the serve no purpose.
      <todo>
        accesslog
        <todo>Let hty_server use inet:peername to obtain peer IP</todo>
        <todo>Set peer IP on tx.</todo>
        <todo>Log peer ip in access log</todo>
      </todo>
      <todo>aggregate</todo>
      <todo>basicauth</todo>
      <todo>bind</todo>
      <todo>catch</todo>
      <todo>crash</todo>
      <todo>css</todo>
      <todo>dir</todo>
      <todo>dryad</todo>
      <todo>empty</todo>
      <todo>filelog</todo>
      <todo>filter</todo>
      <todo>flat</todo>
      <todo>forceget</todo>
      <todo>formdocs</todo>
      <todo>fs</todo>
      <todo>gate</todo>
      <todo>helloworld</todo>
      <todo>history</todo>
      <todo>html</todo>
      <todo>http</todo>
      <todo>index</todo>
      <todo>links</todo>
      <todo>listen</todo>
      <todo>listing</todo>
      <todo>logviewer</todo>
      <todo>override</todo>
      <todo>realm</todo>
      <todo>redirect</todo>
      <todo>rules</todo>
      <todo>sendfile</todo>
      <todo>shift</todo>
      <todo>signup</todo>
      <todo>site</todo>
      <todo>siteref</todo>
      <todo>static</todo>
      <todo>status</todo>
      <todo>status2</todo>
      <todo>storage</todo>
      <todo>ticketeer</todo>
      <todo>timeseries</todo>
      <todo>union</todo>
      <todo>vhost</todo>
      <todo>xml</todo>
      <todo>xslpi</todo>
      <todo>name_eq_pass</todo>
    </todo>
    <todo>Add smtp server. should it use the same tx objects? should it
      pass along tx for the entire mail or parts of the handshake?
    </todo>
    <todo>fswatch server. Param is file path to watch, content is handlers</todo>
    <todo>timer server, either cron or delay/interval pattern. Could these be
      unified? Would an offset number of units in each slot be enough to mimic
      the delay/interval pattern with a thus extended cron?</todo>

    <todo>STOMP server. param is a remote hostport to connect to, handlers
      specify queue/topic
    </todo>
    <todo>http server should understand an extended syntax for port.
      In addition to Port.http it should be possible to write MinPort,MaxPort.http.
      also, omitting the port should mean use a random available port. </todo>
    <todo>wsdl resource. param takes a module</todo>

    <todo>the site should get this file carried across,
       with some todoview xsl
     <done/>
     </todo>
  <todo>
    Fix integ tests
    <todo>
      They should run the escript binary as fixtures, not integrate into
      hty_ modules.
    </todo>
    <todo>
      Eunit is prolly not the ticket. We need other properties of the test output
      <todo>
        Test report should clearly report which fixture and which test case was run
      </todo>
      <todo>
        Test report should have links to a xslpi view of the test case
      </todo>
      <todo>
        Fixture stdout should be linked from the test case
      </todo>
    </todo>
    <todo>
      The directives pages should show what tests exercise them
      <todo>
      There should be an index generated from the test case fixture that mention
      all directives in use in that fixture.
      </todo>
      <todo>
        The directives page should contain a link into this index
      </todo>
    </todo>
  </todo>
  <todo>
    If compilation fails the built site should reflect this!
    <todo>Perhaps the build should start with a clean.</todo>
    <todo>Build output logs should be copied to the site</todo>
  </todo>
  <todo>
    hty_main should not invoke hty_mounter, it should send a message {mount, Fspath} to some central process that will mount and report back.
  </todo>
</todo>
